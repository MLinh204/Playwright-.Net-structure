// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlaywrightTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("User Signup")]
    [NUnit.Framework.CategoryAttribute("Signup")]
    public partial class UserSignupFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Signup"};
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User Signup", "    As a new user\r\n    I want to create an account on the website\r\n    So that I " +
                    "can access the application features", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
            testRunner.Given("I am on the signup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful user registration")]
        [NUnit.Framework.CategoryAttribute("SignupSuccess")]
        public void SuccessfulUserRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "SignupSuccess"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful user registration", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "name",
                            "{TEST_USER}"});
                table3.AddRow(new string[] {
                            "email",
                            "{TEST_EMAIL}"});
                testRunner.When("I enter new user signup details", ((string)(null)), table3, "When ");
                testRunner.And("I click the signup button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Title",
                            "Mr"});
                table4.AddRow(new string[] {
                            "Password",
                            "{TEST_PASSWORD}"});
                table4.AddRow(new string[] {
                            "Day",
                            "1"});
                table4.AddRow(new string[] {
                            "Month",
                            "January"});
                table4.AddRow(new string[] {
                            "Year",
                            "2020"});
                table4.AddRow(new string[] {
                            "First Name",
                            "{TEST_FIRSTNAME}"});
                table4.AddRow(new string[] {
                            "Last Name",
                            "{TEST_LASTNAME}"});
                table4.AddRow(new string[] {
                            "Company",
                            "{TEST_COMPANY}"});
                table4.AddRow(new string[] {
                            "Address1",
                            "{TEST_ADDRESS}"});
                table4.AddRow(new string[] {
                            "Address2",
                            "{TEST_ADDRESS2}"});
                table4.AddRow(new string[] {
                            "Country",
                            "Canada"});
                table4.AddRow(new string[] {
                            "State",
                            "{TEST_STATE}"});
                table4.AddRow(new string[] {
                            "City",
                            "{TEST_CITY}"});
                table4.AddRow(new string[] {
                            "Zipcode",
                            "{TEST_ZIPCODE}"});
                table4.AddRow(new string[] {
                            "Phone Number",
                            "{TEST_PHONE_NUMBER}"});
                testRunner.And("I fill in the account details", ((string)(null)), table4, "And ");
                testRunner.And("I click create account button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.Then("I should see the account created message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("I should be logged in successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Signup page is accessible")]
        [NUnit.Framework.CategoryAttribute("AccessSignupPage")]
        public void SignupPageIsAccessible()
        {
            string[] tagsOfScenario = new string[] {
                    "AccessSignupPage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Signup page is accessible", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.Then("the signup page should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Signup with existing email")]
        [NUnit.Framework.CategoryAttribute("SignupWithExistedEmail")]
        public void SignupWithExistingEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "SignupWithExistedEmail"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Signup with existing email", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "name",
                            "{EXISTED_USERNAME}"});
                table5.AddRow(new string[] {
                            "email",
                            "{EXISTED_EMAIL}"});
                testRunner.When("I enter existing user signup details", ((string)(null)), table5, "When ");
                testRunner.And("I click the signup button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.Then("I should see email already exists message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
